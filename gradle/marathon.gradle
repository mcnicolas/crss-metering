import groovyx.net.http.RESTClient

import static groovyx.net.http.ContentType.JSON
import groovy.json.JsonSlurper
import groovyx.net.http.RESTClient
import static groovyx.net.http.ContentType.JSON

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath('org.codehaus.groovy.modules.http-builder:http-builder:0.7.2') {
            exclude group: 'org.codehaus.groovy', module: 'groovy-all'
            exclude group: 'org.codehaus.groovy', module: 'groovy'
        }
    }
}

task generateMarathonConfig(type: Copy) {
    description 'Generate Marathon Configuration'

    if (!project.hasProperty('env'))
        project.ext.env = 'dev'

    outputs.upToDateWhen { false } // always run

    from 'deployment/marathon'
    into "$buildDir/deployment/marathon"
    include 'marathon.json.template'
    rename { file -> "${project.name}.json" }

    def envSet = project.hasProperty('envSet') ? project.ext.envSet : '/crss'
    def appId = "$envSet/${project.hasProperty('serviceId') ? project.ext.serviceId : project.name}"
    def appIdDash = appId.replaceAll("/", "-")

    expand(project: project, appId: appId, appIdDash: appIdDash,
            dockerImage: "registry.marathon.l4lb.thisdcos.directory:5000/$dockerImageTag",
            domain: project.hasProperty('domain') ? project.ext.domain : 'pemc.exist.com'
    )
}

task marathonDeploy(dependsOn: generateMarathonConfig) {
    doFirst {
        if (!project.hasProperty('marathonUrl')) {
            throw new GradleException("Property marathonUrl not supplied. Please supply via -PmarathonUrl=http//ip.marathon/v2")
        }
    }
    doLast {
        def definitionFile = "${project.buildDir}/deployment/marathon/${project.name}.json"
        def marathonDefinition = new groovy.json.JsonSlurper().parse(file(definitionFile))

        def appId = URLEncoder.encode(marathonDefinition.id, "UTF-8")

        def marathonClient = new RESTClient("$marathonUrl/$appId?force=true", JSON)

        if (project.hasProperty('dcosToken')) {
            marathonClient.setHeaders([Authorization: "token=${project.ext.dcosToken}"])
            marathonClient.ignoreSSLIssues()
        }

        def response = marathonClient.put(body: marathonDefinition).getData()

        def metadata = "marathon-deployment-$project.name"
        file(metadata).createNewFile()
        file(metadata).text = response

        logger.quiet "Deployed using appId=$marathonDefinition.id and marathonDefinition=" + definitionFile
        logger.quiet "Marthon details = [deploymentId: $response.deploymentId, version: $response.version]"
    }
}