package com.pemc.crss.meter.upload;

import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import static com.pemc.crss.meter.upload.LoginDialog.RET_OK;
import static com.pemc.crss.meter.upload.SelectedFileUtils.retrieveFileListing;
import static com.pemc.crss.meter.upload.SettingsDialog.RET_SAVE;
import static javax.swing.JFileChooser.APPROVE_OPTION;
import static javax.swing.JFileChooser.FILES_AND_DIRECTORIES;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.WARNING_MESSAGE;
import static javax.swing.JOptionPane.showMessageDialog;
import static org.apache.commons.io.FilenameUtils.getExtension;
import static org.apache.commons.lang3.StringUtils.equalsIgnoreCase;
import static org.apache.commons.lang3.StringUtils.isBlank;

public class HeaderPanel extends JPanel {

    private FileFilter fileFilterXLS = new FileNameExtensionFilter("Excel Files (xls, xlsx)",
            "xls", "xlsx");
    private FileFilter fileFilterMDEF = new FileNameExtensionFilter("MDEF Files (mde)",
            "mde");
    private FileFilter fileFilterCSV = new FileNameExtensionFilter("CSV Files (csv)",
            "csv");

    private MeterDataUploader parent;
    private String selectedFileExtension = "";
    private ParticipantName participant;

    public HeaderPanel() {
        initComponents();
    }

    public void configureComponents(MeterDataUploader parent) {
        this.parent = parent;

        btnLogout.setVisible(false);

        cboCategory.addItem(new ComboBoxItem("DAILY", "Daily"));
        cboCategory.addItem(new ComboBoxItem("MONTHLY", "Monthly"));
        cboCategory.addItem(new ComboBoxItem("CORRECTED_DAILY", "Corrected Meter Data (Daily)"));
        cboCategory.addItem(new ComboBoxItem("CORRECTED_MONTHLY", "Corrected Meter Data (Monthly)"));
    }

    public void configureServices() {
        populateMSPComboBox();

        // TODO:

        // 3. Determine user type
        // 4. If MSP, change MSP combo box selection to corresponding logged in MSP and disable combo box
        // 5. If PEMC user, enable MSP combo box selection

        // 6. Upon clicking on upload the following validation should take place:
        // 6.1 there should be some files selected
        // 6.2 there should be an msp selected (if pemc user)
    }

    private void populateMSPComboBox() {
        // 0. Consider prepopulation of MSP via async call at startup
        // 1. Populate MSP combo box: Registration /category/msp
        // 2. MSP combo box should have a blank item as the first element

        DefaultComboBoxModel<ComboBoxItem> model = (DefaultComboBoxModel<ComboBoxItem>) cboMSP.getModel();
        model.removeAllElements();

        cboMSP.addItem(new ComboBoxItem("", ""));

        for (ComboBoxItem comboBoxItem : parent.getMSPListing()) {
            cboMSP.addItem(comboBoxItem);
        }

        participant = parent.getParticipant();
        if (participant != null) {
            updateSelectedMSP(parent.getParticipant().getShortName());
            cboMSP.setEnabled(false);
        }
    }

    public void updateSelectedMSP(String shortName) {
        DefaultComboBoxModel<ComboBoxItem> model = (DefaultComboBoxModel<ComboBoxItem>) cboMSP.getModel();

        for (int i = 0; i < model.getSize(); i++) {
            ComboBoxItem item = model.getElementAt(i);
            if (equalsIgnoreCase(item.getValue(), shortName)) {
                cboMSP.setSelectedIndex(i);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents
        GridBagConstraints gridBagConstraints;

        toolbarPanel = new JPanel();
        btnSelectFiles = new JButton();
        btnClearTable = new JButton();
        btnUpload = new JButton();
        btnSettings = new JButton();
        btnLogout = new JButton();
        btnLogin = new JButton();
        fieldPanel = new JPanel();
        lblCategory = new JLabel();
        cboCategory = new JComboBox<>();
        lblMSP = new JLabel();
        cboMSP = new JComboBox<>();

        setLayout(new BorderLayout());

        btnSelectFiles.setIcon(new ImageIcon(getClass().getResource("/images/Transaction List Filled-50.png"))); // NOI18N
        btnSelectFiles.setToolTipText("Select Files");
        btnSelectFiles.setEnabled(false);
        btnSelectFiles.setFocusable(false);
        btnSelectFiles.setHorizontalTextPosition(SwingConstants.CENTER);
        btnSelectFiles.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                selectFilesActionPerformed(evt);
            }
        });
        toolbarPanel.add(btnSelectFiles);

        btnClearTable.setIcon(new ImageIcon(getClass().getResource("/images/Broom-48.png"))); // NOI18N
        btnClearTable.setToolTipText("Clear Selection");
        btnClearTable.setEnabled(false);
        btnClearTable.setFocusable(false);
        btnClearTable.setHorizontalTextPosition(SwingConstants.CENTER);
        btnClearTable.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                clearSelectionActionPerformed(evt);
            }
        });
        toolbarPanel.add(btnClearTable);

        btnUpload.setIcon(new ImageIcon(getClass().getResource("/images/Upload to the Cloud-50.png"))); // NOI18N
        btnUpload.setToolTipText("Upload Files");
        btnUpload.setEnabled(false);
        btnUpload.setFocusable(false);
        btnUpload.setHorizontalTextPosition(SwingConstants.CENTER);
        btnUpload.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                uploadActionPerformed(evt);
            }
        });
        toolbarPanel.add(btnUpload);

        btnSettings.setIcon(new ImageIcon(getClass().getResource("/images/Vertical Settings Mixer-50.png"))); // NOI18N
        btnSettings.setToolTipText("Settings");
        btnSettings.setFocusable(false);
        btnSettings.setHorizontalTextPosition(SwingConstants.CENTER);
        btnSettings.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                settingsActionPerformed(evt);
            }
        });
        toolbarPanel.add(btnSettings);

        btnLogout.setIcon(new ImageIcon(getClass().getResource("/images/Export-48.png"))); // NOI18N
        btnLogout.setToolTipText("Logout");
        btnLogout.setEnabled(false);
        btnLogout.setFocusable(false);
        btnLogout.setHorizontalTextPosition(SwingConstants.CENTER);
        btnLogout.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        toolbarPanel.add(btnLogout);

        btnLogin.setIcon(new ImageIcon(getClass().getResource("/images/Key-48.png"))); // NOI18N
        btnLogin.setToolTipText("Settings");
        btnLogin.setFocusable(false);
        btnLogin.setHorizontalTextPosition(SwingConstants.CENTER);
        btnLogin.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });
        toolbarPanel.add(btnLogin);

        add(toolbarPanel, BorderLayout.WEST);

        fieldPanel.setLayout(new GridBagLayout());

        lblCategory.setText("Category:");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(0, 5, 0, 5);
        fieldPanel.add(lblCategory, gridBagConstraints);

        cboCategory.setEnabled(false);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(5, 5, 0, 5);
        fieldPanel.add(cboCategory, gridBagConstraints);

        lblMSP.setText("MSP:");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(0, 5, 0, 5);
        fieldPanel.add(lblMSP, gridBagConstraints);

        cboMSP.setEnabled(false);
        cboMSP.setPreferredSize(new Dimension(350, 27));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        fieldPanel.add(cboMSP, gridBagConstraints);

        add(fieldPanel, BorderLayout.EAST);
    }//GEN-END:initComponents

    private void selectFilesActionPerformed(ActionEvent evt) {//GEN-FIRST:event_selectFilesActionPerformed
        JFileChooser fileChooser = new JFileChooser();

        String selectedCategory = ((ComboBoxItem) cboCategory.getSelectedItem()).getValue();
        if (equalsIgnoreCase(selectedCategory, "DAILY")) {
            fileChooser.addChoosableFileFilter(fileFilterMDEF);
        }

        fileChooser.addChoosableFileFilter(fileFilterXLS);
        fileChooser.addChoosableFileFilter(fileFilterCSV);
        fileChooser.setAcceptAllFileFilterUsed(false);

        fileChooser.setFileHidingEnabled(true);
        fileChooser.setFileSelectionMode(FILES_AND_DIRECTORIES);
        fileChooser.setMultiSelectionEnabled(true);
        int action = fileChooser.showOpenDialog(this);

        if (action == APPROVE_OPTION) {
            FileNameExtensionFilter fileFilter = (FileNameExtensionFilter) fileChooser.getFileFilter();

            List<FileBean> selectedFiles = retrieveFileListing(fileChooser.getSelectedFiles(), fileFilter.getExtensions());

            if (selectedFiles.isEmpty()) {
                showMessageDialog(parent, "No files found matching " + fileFilter.getDescription(),
                        "Missing Files", WARNING_MESSAGE);
            } else {
                FileBean fileBean = selectedFiles.get(0);
                selectedFileExtension = getExtension(fileBean.getPath().getFileName().toString());

                parent.updateTableDisplay(selectedFiles);
                btnSelectFiles.setEnabled(false);
                btnClearTable.setEnabled(true);
                btnUpload.setEnabled(true);
            }
        }
    }//GEN-LAST:event_selectFilesActionPerformed

    private void uploadActionPerformed(ActionEvent evt) {//GEN-FIRST:event_uploadActionPerformed
        String category = ((ComboBoxItem) cboCategory.getSelectedItem()).getValue();

        if (!equalsIgnoreCase(category, "daily") && equalsIgnoreCase(selectedFileExtension, "mde")) {
            showMessageDialog(parent, "MDEF files can only be uploaded for Daily category.", "File Validation Error",
                    ERROR_MESSAGE);
            cboCategory.requestFocus();

            return;
        }

        // Validate MSP
        String mspShortName = ((ComboBoxItem) cboMSP.getSelectedItem()).getValue();

        if (isBlank(mspShortName)) {
            showMessageDialog(parent, "Please select an MSP", "Blank MSP Error", ERROR_MESSAGE);
            cboMSP.requestFocus();

            return;
        }

        uploadingToolbar();
        parent.uploadData(category, mspShortName);
    }//GEN-LAST:event_uploadActionPerformed

    private void settingsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_settingsActionPerformed
        SettingsDialog settingsDialog = new SettingsDialog(parent, true);
        settingsDialog.configureComponents();
        settingsDialog.setVisible(true);

        if (settingsDialog.getReturnStatus() == RET_SAVE) {
            parent.saveSettings(settingsDialog.getServerURL());
        }
    }//GEN-LAST:event_settingsActionPerformed

    private void clearSelectionActionPerformed(ActionEvent evt) {//GEN-FIRST:event_clearSelectionActionPerformed
        parent.clearSelectedFiles();

        btnSelectFiles.setEnabled(true);
        btnClearTable.setEnabled(false);
        btnUpload.setEnabled(false);

        selectedFileExtension = "";
    }//GEN-LAST:event_clearSelectionActionPerformed

    private void logoutActionPerformed(ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        parent.logout();
        loggedOutToolbar();
    }//GEN-LAST:event_logoutActionPerformed

    private void loginActionPerformed(ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
        LoginDialog loginDialog = new LoginDialog(parent, true);
        loginDialog.setVisible(true);

        if (loginDialog.getReturnStatus() == RET_OK) {
            parent.login(loginDialog.getUsername(), loginDialog.getPassword());
        }
    }//GEN-LAST:event_loginActionPerformed

    // TODO: Find a more elegant way of enabling/disabling buttons

    public void uploadingToolbar() {
        btnSelectFiles.setEnabled(false);
        btnClearTable.setEnabled(false);
        btnUpload.setEnabled(false);

        btnLogin.setEnabled(false);
        btnLogin.setVisible(false);

        btnSettings.setEnabled(false);

        btnLogout.setEnabled(false);
        btnLogout.setVisible(true);

        cboCategory.setEnabled(false);
        cboMSP.setEnabled(false);
    }

    public void readyToUploadToolbar() {
        btnSelectFiles.setEnabled(false);
        btnClearTable.setEnabled(true);
        btnUpload.setEnabled(true);

        btnLogin.setEnabled(false);
        btnLogin.setVisible(false);

        btnSettings.setEnabled(false);

        btnLogout.setEnabled(true);
        btnLogout.setVisible(true);

        cboCategory.setEnabled(true);
        cboMSP.setEnabled(true);
    }

    public void disableAllToolbar() {
        btnSelectFiles.setEnabled(false);
        btnClearTable.setEnabled(false);
        btnUpload.setEnabled(false);

        btnLogin.setEnabled(false);
        btnLogin.setVisible(true);

        btnSettings.setEnabled(false);

        btnLogout.setEnabled(false);
        btnLogout.setVisible(false);

        cboCategory.setEnabled(false);
        cboMSP.setEnabled(false);
    }

    public void loggedInToolbar() {
        btnSelectFiles.setEnabled(true);
        btnClearTable.setEnabled(false);
        btnUpload.setEnabled(false);

        btnLogin.setEnabled(false);
        btnLogin.setVisible(false);

        btnSettings.setEnabled(false);

        btnLogout.setEnabled(true);
        btnLogout.setVisible(true);

        cboCategory.setEnabled(true);

        if (participant != null) {
            cboMSP.setEnabled(false);
        } else {
            cboMSP.setEnabled(true);
        }
    }

    public void loggedOutToolbar() {
        btnSelectFiles.setEnabled(false);
        btnClearTable.setEnabled(false);
        btnUpload.setEnabled(false);

        btnLogin.setEnabled(true);
        btnLogin.setVisible(true);

        btnSettings.setEnabled(true);

        btnLogout.setEnabled(false);
        btnLogout.setVisible(false);

        cboCategory.setEnabled(false);
        cboMSP.setEnabled(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnClearTable;
    private JButton btnLogin;
    private JButton btnLogout;
    private JButton btnSelectFiles;
    private JButton btnSettings;
    private JButton btnUpload;
    private JComboBox<ComboBoxItem> cboCategory;
    private JComboBox<ComboBoxItem> cboMSP;
    private JPanel fieldPanel;
    private JLabel lblCategory;
    private JLabel lblMSP;
    private JPanel toolbarPanel;
    // End of variables declaration//GEN-END:variables
}
