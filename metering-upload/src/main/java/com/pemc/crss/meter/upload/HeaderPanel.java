package com.pemc.crss.meter.upload;

import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import static com.pemc.crss.meter.upload.FileUtils.retrieveFileListing;
import static javax.swing.JFileChooser.APPROVE_OPTION;
import static javax.swing.JFileChooser.FILES_AND_DIRECTORIES;

public class HeaderPanel extends JPanel {

    private MeterDataUploader parent;

    public HeaderPanel() {
        initComponents();
    }

    public void configureComponents(MeterDataUploader parent) {
        this.parent = parent;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents
        GridBagConstraints gridBagConstraints;

        categoryComboBoxModel = new DefaultComboBoxModel<>(
            new String[]{
                "Daily", "Monthly", "Corrected Meter Data"
            }
        );
        mspComboBoxModel = new DefaultComboBoxModel<>(
            new String[]{
                "Manila Electric Company",
                "Ibaan Electric and Engineering Corporation",
                "National Grid Corporation of the Phils",
                "Peninsula Electric Cooperative",
                "Exemplar Enterprise Inc. (Puyat Flooring Products Inc.)"
            }
        );
        filetypeComboBoxModel = new DefaultComboBoxModel<>(
            new String[]{
                "XLS, XLSX", "CSV", "MDEF"
            }
        );
        toolbarPanel = new JPanel();
        btnSelectFiles = new JButton();
        btnClearTable = new JButton();
        btnUpload = new JButton();
        btnSettings = new JButton();
        btnSettings2 = new JButton();
        fieldPanel = new JPanel();
        lblCategory = new JLabel();
        cboCategory = new JComboBox<>();
        lblMSP = new JLabel();
        cboMSP = new JComboBox<>();

        categoryComboBoxModel.setSelectedItem("Monthly");

        setLayout(new BorderLayout());

        btnSelectFiles.setIcon(new ImageIcon(getClass().getResource("/images/Transaction List Filled-50.png"))); // NOI18N
        btnSelectFiles.setToolTipText("Select Files");
        btnSelectFiles.setFocusable(false);
        btnSelectFiles.setHorizontalTextPosition(SwingConstants.CENTER);
        btnSelectFiles.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                selectFilesActionPerformed(evt);
            }
        });
        toolbarPanel.add(btnSelectFiles);

        btnClearTable.setIcon(new ImageIcon(getClass().getResource("/images/Erase-50.png"))); // NOI18N
        btnClearTable.setToolTipText("Clear Selection");
        btnClearTable.setFocusable(false);
        btnClearTable.setHorizontalTextPosition(SwingConstants.CENTER);
        btnClearTable.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                clearSelectionActionPerformed(evt);
            }
        });
        toolbarPanel.add(btnClearTable);

        btnUpload.setIcon(new ImageIcon(getClass().getResource("/images/Upload to the Cloud-50.png"))); // NOI18N
        btnUpload.setToolTipText("Upload Files");
        btnUpload.setFocusable(false);
        btnUpload.setHorizontalTextPosition(SwingConstants.CENTER);
        btnUpload.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                uploadActionPerformed(evt);
            }
        });
        toolbarPanel.add(btnUpload);

        btnSettings.setIcon(new ImageIcon(getClass().getResource("/images/Installing Updates-48.png"))); // NOI18N
        btnSettings.setToolTipText("Settings");
        btnSettings.setFocusable(false);
        btnSettings.setHorizontalTextPosition(SwingConstants.CENTER);
        btnSettings.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                settingsActionPerformed(evt);
            }
        });
        toolbarPanel.add(btnSettings);

        btnSettings2.setIcon(new ImageIcon(getClass().getResource("/images/Export-50.png"))); // NOI18N
        btnSettings2.setToolTipText("Logout");
        btnSettings2.setFocusable(false);
        btnSettings2.setHorizontalTextPosition(SwingConstants.CENTER);
        btnSettings2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        toolbarPanel.add(btnSettings2);

        add(toolbarPanel, BorderLayout.WEST);

        fieldPanel.setLayout(new GridBagLayout());

        lblCategory.setText("Category:");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(0, 5, 0, 5);
        fieldPanel.add(lblCategory, gridBagConstraints);

        cboCategory.setModel(categoryComboBoxModel);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(0, 5, 0, 5);
        fieldPanel.add(cboCategory, gridBagConstraints);

        lblMSP.setText("MSP:");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(0, 5, 0, 5);
        fieldPanel.add(lblMSP, gridBagConstraints);

        cboMSP.setModel(mspComboBoxModel);
        cboMSP.setPreferredSize(new Dimension(350, 27));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(0, 5, 0, 5);
        fieldPanel.add(cboMSP, gridBagConstraints);

        add(fieldPanel, BorderLayout.EAST);
    }//GEN-END:initComponents

    private void selectFilesActionPerformed(ActionEvent evt) {//GEN-FIRST:event_selectFilesActionPerformed
        JFileChooser fileChooser = new JFileChooser();

        FileFilter fileFilterXLS = new FileNameExtensionFilter("Excel Files (xls, xlsx)", "xls", "xlsx");
        FileFilter fileFilterMDEF = new FileNameExtensionFilter("MDEF Files (mde)", "mde");
        FileFilter fileFilterCSV = new FileNameExtensionFilter("CSV Files (csv)", "csv");

        // TODO: Dynamic depending on the selected data category
        fileChooser.addChoosableFileFilter(fileFilterXLS);
        fileChooser.addChoosableFileFilter(fileFilterMDEF);
        fileChooser.addChoosableFileFilter(fileFilterCSV);
        fileChooser.setAcceptAllFileFilterUsed(false);

        fileChooser.setFileHidingEnabled(true);
        fileChooser.setFileSelectionMode(FILES_AND_DIRECTORIES);
        fileChooser.setMultiSelectionEnabled(true);
        int action = fileChooser.showOpenDialog(this);

        if (action == APPROVE_OPTION) {
            List<FileBean> selectedFiles = retrieveFileListing(fileChooser.getSelectedFiles());
            parent.updateTableDisplay(selectedFiles);
        }
    }//GEN-LAST:event_selectFilesActionPerformed

    private void uploadActionPerformed(ActionEvent evt) {//GEN-FIRST:event_uploadActionPerformed
        parent.uploadData();
        // TODO:
        // 1. Display a progress bar
        // 2. Send files to the server
    }//GEN-LAST:event_uploadActionPerformed

    private void settingsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_settingsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_settingsActionPerformed

    private void clearSelectionActionPerformed(ActionEvent evt) {//GEN-FIRST:event_clearSelectionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clearSelectionActionPerformed

    private void logoutActionPerformed(ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO: Logout from oauth
        System.exit(0);
    }//GEN-LAST:event_logoutActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnClearTable;
    private JButton btnSelectFiles;
    private JButton btnSettings;
    private JButton btnSettings2;
    private JButton btnUpload;
    private DefaultComboBoxModel categoryComboBoxModel;
    private JComboBox<String> cboCategory;
    private JComboBox<String> cboMSP;
    private JPanel fieldPanel;
    private DefaultComboBoxModel filetypeComboBoxModel;
    private JLabel lblCategory;
    private JLabel lblMSP;
    private DefaultComboBoxModel mspComboBoxModel;
    private JPanel toolbarPanel;
    // End of variables declaration//GEN-END:variables
}
