buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'https://repo.spring.io/plugins-release'
        }

        // this two repository must not be here since it was already
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'gradle.plugin.org.liquibase:liquibase-gradle-plugin:1.2.1'
        classpath 'org.postgresql:postgresql:9.4.1212'
        classpath files("$rootDir/libs/ojdbc6-11.2.0.4.jar")
//        classpath group: 'org.liquibase', name: 'liquibase-core', version: '3.5.3'
    }
}

configurations {
    optional
    compile.extendsFrom optional
}

apply plugin: 'org.liquibase.gradle'
apply plugin: 'org.springframework.boot'
apply from: file('docker.gradle')
apply from: file("$rootDir/gradle/marathon.gradle")
bootRun {
    systemProperties = System.properties
}

dependencies {
    compile 'io.undertow:undertow-core'
    compile 'io.undertow:undertow-servlet'
    compile 'io.undertow:undertow-websockets-jsr'

    compile 'org.apache.poi:poi'
    compile 'org.apache.poi:poi-ooxml'
    compile 'net.sf.supercsv:super-csv-java8'

    compile 'org.projectlombok:lombok'

    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-undertow'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-cache'
    compile 'org.springframework.boot:spring-boot-starter-amqp'
    compile 'org.springframework.boot:spring-boot-starter-jdbc'

    compile 'org.springframework.data:spring-data-commons'

    optional 'org.springframework.boot:spring-boot-configuration-processor'

    compile 'org.springframework.cloud:spring-cloud-starter-config'
    compile 'org.springframework.cloud:spring-cloud-starter-bus-amqp'

    compile 'org.springframework.security.oauth:spring-security-oauth2'

    compile 'net.sf.ehcache:ehcache'

    runtime 'com.zaxxer:HikariCP'
    runtime 'org.postgresql:postgresql'
    runtime files("$rootDir/libs/edb-jdbc17.jar")

    compile 'commons-io:commons-io'
    compile 'commons-beanutils:commons-beanutils'
    compile 'org.apache.commons:commons-lang3'
    compile 'com.google.guava:guava'

    runtime 'de.appelgriepsch.logback:logback-gelf-appender'

    testCompile 'org.codehaus.groovy:groovy-all'
    testCompile 'org.spockframework:spock-core'
    testCompile 'org.spockframework:spock-spring'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

liquibase {
    activities {
        validate {
            def env = project.hasProperty('env') ? env : 'dev'

            changeLogFile "${project.file('src/main')}/liquibase/changelog-main.groovy"
            url project.property("${env}.datasource.url")
            username project.property("${env}.datasource.username")
            password project.property("${env}.datasource.password")
//            driver 'com.edb.Driver'
            defaultSchemaName 'metering'
            outputFile "$project.buildDir/db/update-scripts.sql"
        }
    }
}

dbUpdateSQL {
    // liquibase task does not create folder, as work around we created it firs
    doFirst {
        file("$buildDir/db").mkdirs()
    }
    doLast {
        // re-write changelog file name to a relative path
        def source = file("$project.buildDir/db/update-scripts.sql")
        file("$project.buildDir/db/metering-update-scripts.sql") <<
                source.text.replaceAll("(--.*:)(.*)(metering/.*.groovy)", '$1 $3')
        source.delete() // cleanup
    }
}