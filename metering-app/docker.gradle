buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }

        // this two repository must not be here since it was already
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.4'
    }
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

import static org.gradle.internal.os.OperatingSystem.*

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

ext {
    baseImage = 'exist/jre:1.8'
    serviceName = 'metering' // simply supply metering than default project.name (metering-app)
    serviceGroup = 'metering'
    dockerImageName = "crss/$project.serviceName"
    dockerImageTag = "$project.dockerImageName:$version"
}

def defaultDockerUrl = {
    current().isLinux() ? 'unix:///var/run/docker.sock' : 'tcp://127.0.0.1:2375'
}

docker {
    url = System.properties['docker.host.url'] ?: defaultDockerUrl()
    if (System.properties['docker.cert.path'])
        certPath = file(System.properties['docker.cert.path'])

    registryCredentials {
        if (project.hasProperty('dockerRegistryUrl')) {
            url = dockerRegistryUrl
        }
    }
}

task copyArtifacts(type: org.gradle.api.tasks.Copy, dependsOn: build) {
    from "${project.buildDir}/libs/${project.name}-${version}.jar"
    into "${project.buildDir}/docker"
    rename("${project.name}-${version}.jar", "app.jar")

    from "${project.buildDir}/resources/main/entrypoint.sh"
    into "${project.buildDir}/docker"
}

task createDockerfile(type: Dockerfile, dependsOn: copyArtifacts) {
    destFile = project.file("${project.buildDir}/docker/Dockerfile")
    from baseImage
    maintainer 'Exist Software Labs'
    environmentVariable('JAVA_OPTS', '-Xms256m -Xmx4g')

    exposePort({ 8080 })
    copyFile('app.jar', 'app.jar')
    runCommand "sh -c 'touch /app.jar'"

    label(["${project.group}.build-no"     : revision,
           "${project.group}.service-group": 'metering'])
    entryPoint('sh', '-c', "java \$JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -server -jar /app.jar")
}

task buildDockerImage(type: DockerBuildImage, dependsOn: createDockerfile) {
    noCache = true
    tag = dockerImageTag
    inputDir = createDockerfile.destFile.parentFile
    remove = true
}

task tagDockerImage(type: DockerTagImage) {
    imageId = dockerImageTag
    tag = project.hasProperty('imageTag') ? imageTag : version

    repository = project.hasProperty('dockerRegistryUrl') ?
            "${dockerRegistryUrl}/$dockerImageName" : dockerImageName
}

task pushDockerImage(type: DockerPushImage, dependsOn: tagDockerImage) {
    imageName = "${docker.registryCredentials.url}/$dockerImageName"
}
